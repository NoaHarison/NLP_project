# -*- coding: utf-8 -*-
"""adult_and_young_csv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwxzPhtlMlK4sFB2tqAqO8Btu512LM9l
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

!ls drive/MyDrive
!find drive/MyDrive
!ls drive/MyDrive/bioinformatica/Colab_Notebooks/final_project/basic_analayze_data/record_kids_data/data.zip
!unzip drive/MyDrive/bioinformatica/Colab_Notebooks/final_project/basic_analayze_data/record_kids_data/data.zip

import zipfile
import os
import csv
from google.colab import files
from itertools import zip_longest

# Path to the ZIP file
zip_path = 'drive/MyDrive/bioinformatica/Colab_Notebooks/final_project/basic_analayze_data/record_kids_data/data.zip'

# Function to classify age based on years, months, and days
def classify_age(years, months, days):
    age_in_months = years * 12 + months
    if age_in_months <= 36:
        return "young"
    elif age_in_months >= 48:
        return "adult"
    else:
        return None

# List to store file contents and age groups
file_lines = []

# Open the ZIP file and process each text file
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    for file_info in zip_ref.infolist():
        if 'finished' in file_info.filename and 'Brown/Sarah' in file_info.filename:
            with zip_ref.open(file_info.filename) as file:
                contents = file.read().decode('utf-8')
                lines = contents.split('\n')
                file_nums = ''.join(filter(str.isdigit, file_info.filename))
                years = int(file_nums[:-4])
                months = int(file_nums[-4:-2])
                days = int(file_nums[-2:])
                age_group = classify_age(years, months, days)
                if age_group is not None:
                    file_lines.extend([(line, age_group) for line in lines])

# Combine every six consecutive lines into one and prepare for CSV export
combined_lines = []
for line1, line2, line3, line4, line5, line6 in zip_longest(file_lines[::6], file_lines[1::6], file_lines[2::6], file_lines[3::6], file_lines[4::6], file_lines[5::6], fillvalue=(None, None)):
    if line1 is not None and line2 is not None and line3 is not None and line4 is not None and line5 is not None and line6 is not None:
        combined_line = ' '.join((line1[0], line2[0], line3[0], line4[0], line5[0], line6[0]))
        combined_group = line1[1]
        combined_lines.append((combined_line, combined_group))
    else:
        if line1 is not None:
            combined_lines.append(line1)
        if line2 is not None:
            combined_lines.append(line2)
        if line3 is not None:
            combined_lines.append(line3)
        if line4 is not None:
            combined_lines.append(line4)
        if line5 is not None:
            combined_lines.append(line5)
        if line6 is not None:
            combined_lines.append(line6)

# Create a new CSV file and write the data
csv_file_path = 'drive/MyDrive/bioinformatica/Colab_Notebooks/final_project/basic_analayze_data/record_kids_data/file_lines.csv'
with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(['Text', 'Age Group'])
    for line, age_group in combined_lines:
        csvwriter.writerow([line, age_group])

print("CSV file created successfully.")
files.download(csv_file_path)

# Initialize a Git repository and push to GitHub
!echo "# ElevationsFix" >> README.md
!git init
!git add README.md
!git commit -m "first commit"
!git branch -M main
!git remote add origin https://github.com/NoaHarison/NLP_project.git
!git push -u origin main
